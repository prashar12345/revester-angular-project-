!function (w, d) {
    const COOKIE_TTL = (24 * 60 * 60 * 1000);
    const CURRENT_MILLIS = 1 * new Date();

    function getCookie(key) {
        let fkey = "_au_" + key + "=";
        let decodedCookie = decodeURIComponent(document.cookie);
        let ca = decodedCookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(fkey) == 0) {
                return c.substring(fkey.length, c.length);
            }
        }
        return null;
    }

    function writeCookie(key, value) {
        d.cookie = "_au_" + key + "=" + value + "; domain=" + extractDomain(d.location.hostname) + "; path=/; max-age=31536000";
    }

    function imgSrcToElement(src, d) {
        var img = d.createElement('img');
        img.height = 1;
        img.width = 1;
        img.style.display = 'none';
        img.src = src;
        img.alt = '';
        return img;
    }

    function scriptSrcToElement(w, d, t, u) {
        var a = d.createElement(t);
        a.async = true;
        a.crossorigin = 'anonymous';
        a.src = u;
        var s = d.getElementsByTagName(t)[0];
        s.parentNode.insertBefore(a, s);
    }

    // naive way to extract domain name (example.com) from full hostname (my.sub.example.com)
    const SIMPLE_DOMAIN_MATCH_REGEX = /[a-z0-9][a-z0-9-]*\.[a-z]+$/i;
    // this next one attempts to account for some ccSLDs, e.g. extracting oxford.ac.uk from www.oxford.ac.uk
    const DOMAIN_MATCH_REGEX = /[a-z0-9][a-z0-9-]+\.[a-z.]{2,6}$/i;

    function extractDomain(hostname) {
        let domain_regex = DOMAIN_MATCH_REGEX;
        let parts = hostname.split('.');
        let tld = parts[parts.length - 1];
        if (tld.length > 4 || tld === 'com' || tld === 'org' || tld === 'net') {
            domain_regex = SIMPLE_DOMAIN_MATCH_REGEX;
        }
        let matches = hostname.match(domain_regex);
        return matches ? matches[0] : hostname;
    };

    function randomString(length) {
        let chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZ'.split('');

        if (!length) {
            length = Math.floor(Math.random() * chars.length);
        }

        let str = '';
        for (let i = 0; i < length; i++) {
            str += chars[Math.floor(Math.random() * chars.length)];
        }
        return str;
    }

    function buildAudigent1d() {
        const secondsSinceEpoch = Math.round(Date.now() / 1000);
        return "AU1D-0100-" + String(secondsSinceEpoch).padStart(12, '0') + "-" + randomString(8) + "-" + randomString(4);
    }

    function getAudigent1d(w, d) {
        let au1d = getCookie("1d");
        if (au1d == null) {
            au1d = buildAudigent1d();
        }
        return au1d;
    }

    function setupHadron(w, d) {
        if (w['__halo__loaded__'] === true) {
            // get HadronID from localStorage
            const hadronId = w.localStorage.auHadronId;
            // cookie sync
            const img = imgSrcToElement('https://ids.ad.gt/api/v1/halo_match?id=' + w.auvars.a + '&halo_id=' + hadronId, d);
            d.body.appendChild(img);
        } else {
            // load hadron script
            scriptSrcToElement(w, d, 'script', 'https://id.halo.ad.gt/api/v1/partner/170?sync=1&url=' + encodeURIComponent(w.location.href));
        }
    }

    (function (w, d, t, u) {
        const au1d = getAudigent1d(w, d);

        w.auvars = w.auvars || {};
        w.auvars['170'] = w.auvars['170'] || {};
        w.auvars['170'].t = '002755679e0de73dbd39973f43a77d2d';
        w.auvars['170'].p = '170';
        w.auvars['170'].a = au1d;
        w.auvars['170'].ty = 'passive';
        w.auvars['170'].m = '1p'
        w.auvars.t = '002755679e0de73dbd39973f43a77d2d';
        w.auvars.p = '170';
        w.auvars.a = au1d;
        w.auvars.ty = 'passive';
        w.auvars.m = '1p'

        writeCookie("1d", au1d);
        setupHadron(w, d);

        if (!w.au || Array.isArray(w.au)) {
            var a = d.createElement(t);
            a.defer = true;
            a.src = u + "?au_id=" + au1d;
            var s = d.getElementsByTagName(t)[0];
            s.parentNode.insertBefore(a, s);
        } else {
            w.au.init();
            w.au.push({ category: 'docReady' });
        }
    })(w, d, 'script', 'https://p.ad.gt/api/v1/p/170');

    (function (w, d) {
        const pixels = [["apn", "https://secure.adnxs.com/getuid?https://ids.ad.gt/api/v1/match?id=[AU1D]&adnxs_id=$UID"], ["ttd", "https://match.adsrvr.org/track/cmf/generic?ttd_pid=8gkxb6n&ttd_tpi=1&gpdr=0&ttd_puid=[AU1D]"], ["pub", "https://image2.pubmatic.com/AdServer/UCookieSetPug?rd=https%3A%2F%2Fids.ad.gt%2Fapi%2Fv1%2Fpbm_match%3Fpbm%3D%23PM_USER_ID%26id%3D[AU1D]"], ["adx", "https://cm.g.doubleclick.net/pixel?google_nid=audigent_w_appnexus_3985&google_cm&google_sc&google_ula=450542624&id=[AU1D]"], ["goo", "https://ids.ad.gt/api/v1/g_hosted?id=[AU1D]"], ["ado", "https://dpm.demdex.net/ibs:dpid=348447&dpuuid=[AU1D]&redir=https%3A%2F%2Fids.ad.gt%2Fapi%2Fv1%2Fadb_match%3Fadb%3D%24%7BDD_UUID%7D%26id%3D[AU1D]"], ["taboola", "https://trc.taboola.com/sg/audigent/1/cm?redirect=http%3A%2F%2Fids.ad.gt%2Fapi%2Fv1%2Ftaboola%3Fpartner_uid%3D%3CTUID%3E%3Fid%3D[AU1D]"], ["mediamath", "https://sync.mathtag.com/sync/img?redir=https%3A%2F%2Fids.ad.gt%2Fapi%2Fv1%2Fmediamath_match%3Fuser_id%3D%5BMM_UUID%5D%26id%3D[AU1D]"], ["bees", "https://match.prod.bidr.io/cookie-sync/audigent?buyer_user_id=[AU1D]"], ["smart", "https://sync.smartadserver.com/getuid?url=https%3A%2F%2Fids.ad.gt%2Fapi%2Fv1%2Fsmart_match%3Fid%3D[AU1D]%26sas_uid%3D%5bsas_uid%5d"], ["impr", "https://ad.360yield.com/ux?&publisher_dmp_id=15&r=https%3A%2F%2Fids.ad.gt%2Fapi%2Fv1%2Fimpr_match%3Fid%3D[AU1D]%26impr_uid%3D%7BPUB_USER_ID%7D"], ["ppnt", "https://bh.contextweb.com/bh/rtset?pid=562316&ev=1&rurl=https://ids.ad.gt/api/v1/ppnt_match?uid=%%VGUID%%&id=[AU1D]"], ["son", "https://sync.go.sonobi.com/us?https://ids.ad.gt/api/v1/son_match?id=[AU1D]&uid=[UID]"], ["openx", "https://u.openx.net/w/1.0/cm?id=998eaf06-9905-4eae-9e26-9fac75960c53&r=https%3A%2F%2Fids.ad.gt%2Fapi%2Fv1%2Fopenx%3Fopenx_id%3D%7BOPENX_ID%7D%26id%3D[AU1D]%26auid%3D[AU1D]"], ["rub", "https://token.rubiconproject.com/token?pid=50242&puid=[AU1D]&gdpr=0"], ["unruly", "https://sync.1rx.io/usersync/audigent/0?dspret=1&redir=https%3A%2F%2Fids.ad.gt%2Fapi%2Fv1%2Funruly%3Fid%3D[AU1D]%26unruly_id%3D%5BRX_UUID%5D"]];
        let pixelCount = 0;
        for (const pixelInfo of pixels) {
            if (pixelCount > 9)
                break;

            const pixelType = pixelInfo[0];
            // replacement of the audigent ID is done in the browser, and not by the backend
            const pixelHref = pixelInfo[1].replaceAll("[AU1D]", w.auvars.a);
            const lastSeenMillis = getCookie("last_seen_" + pixelType);

            if (lastSeenMillis == null || lastSeenMillis + COOKIE_TTL < CURRENT_MILLIS) {
                const img = imgSrcToElement(pixelHref, d);
                d.body.appendChild(img);

                writeCookie("last_seen_" + pixelType, CURRENT_MILLIS);
                pixelCount += 1;
            }
        }
    }) (w, d);
}(window, document);